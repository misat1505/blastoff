from typing import Optional

from pydantic import BaseModel, Field

from app.schemas.agency import AgencyResponse


class RocketBase(BaseModel):
    """
    Base model for rocket data.

    This model contains common attributes for a rocket, such as its name, number of stages,
    dimensions, launch statistics, and capacity in various orbits.

    Attributes:
        name (str): The name of the rocket.
        no_stages (Optional[int]): The number of stages in the rocket. Must be a positive integer.
        height (Optional[float]): The height of the rocket in meters.
        mass (Optional[float]): The mass of the rocket in kilograms.
        diameter (Optional[float]): The diameter of the rocket in meters.
        description (Optional[str]): A description of the rocket.
        launches_count (Optional[int]): The total number of launches for the rocket.
        successful_launches_count (Optional[int]): The number of successful launches.
        failed_launches_count (Optional[int]): The number of failed launches.
        landings_count (Optional[int]): The total number of landings of the rocket.
        successful_landings_count (Optional[int]): The number of successful landings.
        failed_landings_count (Optional[int]): The number of failed landings.
        pending_launches (Optional[int]): The number of pending launches for the rocket.
        leo_capacity (Optional[float]): The rocket's payload capacity in Low Earth Orbit (LEO).
        gto_capacity (Optional[float]): The rocket's payload capacity in Geostationary Transfer Orbit (GTO).
        geo_capacity (Optional[float]): The rocket's payload capacity in Geosynchronous Orbit (GEO).
        sso_capacity (Optional[float]): The rocket's payload capacity in Sun-Synchronous Orbit (SSO).
        rocket_thrust (Optional[float]): The total thrust generated by the rocket's engines.
        launch_cost (Optional[float]): The cost per launch of the rocket.
        image_url (Optional[str]): A URL to an image of the rocket.
    """

    name: str
    no_stages: Optional[int] = Field(
        ..., gt=0, description="Number of stages, must be a positive integer"
    )
    height: Optional[float] = None
    mass: Optional[float] = None
    diameter: Optional[float] = None
    description: Optional[str] = None
    launches_count: Optional[int] = Field(
        0, ge=0, description="Total number of launches"
    )
    successful_launches_count: Optional[int] = Field(
        0, ge=0, description="Number of successful launches"
    )
    failed_launches_count: Optional[int] = Field(
        0, ge=0, description="Number of failed launches"
    )
    landings_count: Optional[int] = Field(
        0, ge=0, description="Total number of landings"
    )
    successful_landings_count: Optional[int] = Field(
        0, ge=0, description="Number of successful landings"
    )
    failed_landings_count: Optional[int] = Field(
        0, ge=0, description="Number of failed landings"
    )
    pending_launches: Optional[int] = Field(
        0, ge=0, description="Total number of pending launches"
    )
    leo_capacity: Optional[float] = None
    gto_capacity: Optional[float] = None
    geo_capacity: Optional[float] = None
    sso_capacity: Optional[float] = None
    rocket_thrust: Optional[float] = None
    launch_cost: Optional[float] = None
    image_url: Optional[str] = None


class RocketCreate(RocketBase):
    """
    Model for creating a new rocket.

    This model extends `RocketBase` to include additional fields for creating a new rocket,
    such as `id` and `agency_id`.

    Attributes:
        id (int): The unique identifier of the rocket.
        agency_id (int): The ID of the agency responsible for the rocket.
    """

    id: int
    agency_id: int


class RocketResponse(RocketBase):
    """
    Model for rocket response data.

    This model is used for API responses when retrieving rocket data. It includes the rocket's
    ID and agency ID and inherits from `RocketBase`.

    Attributes:
        id (int): The unique identifier of the rocket.
        agency_id (int): The ID of the agency responsible for the rocket.

    Config:
        from_attributes (bool): Specifies to Pydantic to use object attributes
        instead of dictionary keys for data mapping.
    """

    id: int
    agency_id: int

    class Config:
        from_attributes = True


class DetailedRocketResponse(RocketBase):
    """
    Model for detailed rocket response data.

    This model extends `RocketResponse` by adding more detailed information about the rocket's
    associated agency. It includes a nested `AgencyResponse` model.

    Attributes:
        id (int): The unique identifier of the rocket.
        agency (AgencyResponse): Detailed information about the rocket's associated agency.

    Config:
        from_attributes (bool): Specifies to Pydantic to use object attributes
        instead of dictionary keys for data mapping.
    """

    id: int
    agency: AgencyResponse

    class Config:
        from_attributes = True
